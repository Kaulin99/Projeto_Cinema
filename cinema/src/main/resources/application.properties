# Define o nome da sua aplicação Spring Boot.
# Útil para identificação em logs e em alguns contextos de gerenciamento.
spring.application.name=gamescon

# Configura a porta em que o servidor web embutido (Tomcat, por padrão) irá rodar.
# A aplicação estará acessível em http://localhost:8080.
server.port=8080

# ===============================================
# CONFIGURAÇÕES DO BANCO DE DADOS (H2 em modo arquivo)
# ===============================================

# Comentário original: Salva os dados em um arquivo no disco (não em memória)
# URL de conexão JDBC para o banco de dados H2.
# - 'jdbc:h2:file:' indica que o H2 deve operar em modo arquivo (persistente).
# - './data/banco_cinema' especifica que os arquivos do banco de dados serão armazenados
#   em uma subpasta chamada 'data' (relativa ao diretório de execução da aplicação),
#   e o nome base do banco de dados será 'banco_cinema'.
spring.datasource.url=jdbc:h2:file:./data/banco_cinema;DB_CLOSE_DELAY=-1;AUTO_SERVER=TRUE

# Nome completo da classe do driver JDBC para o H2 Database.
spring.datasource.driverClassName=org.h2.Driver

# Nome de usuário para conectar ao banco de dados H2.
# 'sa' é o usuário padrão para H2.
spring.datasource.username=sa

# Senha para conectar ao banco de dados H2.
# Por padrão, o usuário 'sa' do H2 tem uma senha vazia.
spring.datasource.password=

# ===============================================
# CONFIGURAÇÕES DO CONSOLE H2 (Ferramenta Web de Gerenciamento do Banco)
# ===============================================

# Comentário original: Permite ver os dados via navegador
# Habilita o console web do H2 Database.
# Útil para visualizar tabelas, executar queries SQL e gerenciar o banco durante o desenvolvimento.
spring.h2.console.enabled=true

# Define o caminho (URL) para acessar o console H2 no navegador.
# Ex: http://localhost:8080/h2-console
spring.h2.console.path=/h2-console

# ===============================================
# CONFIGURAÇÕES DO JPA E HIBERNATE (Mapeamento Objeto-Relacional)
# ===============================================

# Comentário original: Cria ou atualiza tabelas conforme o modelo
# Define como o Hibernate (o provedor JPA padrão do Spring Boot) deve lidar
# com a geração do esquema do banco de dados (DDL - Data Definition Language).
# - 'update': O Hibernate tentará atualizar o esquema do banco de dados para corresponder
#   às suas entidades JPA (@Entity). Se tabelas ou colunas não existirem, serão criadas.
#   Se existirem com estrutura diferente, o Hibernate tentará alterá-las.
#   Cuidado: Em produção, 'validate' ou 'none' (com migrações manuais/Flyway/Liquibase) são mais seguros.
spring.jpa.hibernate.ddl-auto=update



